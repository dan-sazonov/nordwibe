"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@yandex";
exports.ids = ["vendor-chunks/@yandex"];
exports.modules = {

/***/ "(ssr)/./node_modules/@yandex/smart-captcha/module.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/@yandex/smart-captcha/module.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InvisibleSmartCaptcha: () => (/* binding */ InvisibleSmartCaptcha),\n/* harmony export */   SmartCaptcha: () => (/* binding */ SmartCaptcha),\n/* harmony export */   callbacks: () => (/* binding */ callbacks),\n/* harmony export */   useSmartCaptchaLoader: () => (/* binding */ useSmartCaptchaLoader)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ var __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\nfunction __read(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);\n    } catch (error) {\n        e = {\n            error: error\n        };\n    } finally{\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        } finally{\n            if (e) throw e.error;\n        }\n    }\n    return ar;\n}\n/**\n * Load script on src and run function on script load\n */ function loadScript(src, onload, onerror, onJavascriptError, immediate) {\n    if (onload === void 0) {\n        onload = null;\n    }\n    if (onerror === void 0) {\n        onerror = null;\n    }\n    if (immediate === void 0) {\n        immediate = true;\n    }\n    var script = document.createElement(\"script\");\n    script.src = src;\n    script.onload = onload;\n    script.onerror = onerror;\n    script.type = \"text/javascript\";\n    script.crossOrigin = \"anonymous\";\n    if (false) {}\n    var addScript = function() {\n        return document.body.appendChild(script);\n    };\n    if (immediate) {\n        addScript();\n    } else {\n        window.addEventListener(\"load\", addScript);\n    }\n}\n/**\n * RegExps.\n * A URL must match #1 and then at least one of #2/#3.\n * Use two levels of REs to avoid REDOS.\n */ var domainRE = /^(\\S+)$/;\nvar localhostDomainRE = /^localhost[\\:?\\d]*(?:[^\\:?\\d]\\S*)?$/;\nvar nonLocalhostDomainRE = /^[^\\s\\.]+\\.\\S{2,}$/;\nfunction isValidHost(str) {\n    if (typeof str !== \"string\") {\n        return false;\n    }\n    var match = str.match(domainRE);\n    if (!match) {\n        return false;\n    }\n    var everythingAfterProtocol = match[0];\n    if (!everythingAfterProtocol) {\n        return false;\n    }\n    if (localhostDomainRE.test(everythingAfterProtocol) || nonLocalhostDomainRE.test(everythingAfterProtocol)) {\n        return true;\n    }\n    return false;\n}\nvar API_LINK = function(host) {\n    if (host === void 0) {\n        host = \"smartcaptcha.yandexcloud.net\";\n    }\n    return \"https://\" + host + \"/captcha.js?render=onload&onload=__onSmartCaptchaReady\";\n};\n/**\n * @internal\n */ var callbacks = [];\nvar startLoading = new Map();\nfunction useSmartCaptchaLoader(host, onJavascriptError) {\n    var _a = __read((0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), 2), smartCaptcha = _a[0], setSmartCaptcha = _a[1];\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        if (smartCaptcha !== undefined || host !== undefined && !isValidHost(host)) {\n            return;\n        }\n        if (window.__onSmartCaptchaReady === undefined) {\n            window.__onSmartCaptchaReady = function() {\n                callbacks.forEach(function(callback) {\n                    return callback();\n                });\n            };\n        }\n        if (window.smartCaptcha) {\n            setSmartCaptcha(window.smartCaptcha);\n        }\n        var index = callbacks.push(function() {\n            return setSmartCaptcha(window.smartCaptcha);\n        });\n        var handleError = function() {\n            onJavascriptError === null || onJavascriptError === void 0 ? void 0 : onJavascriptError({\n                filename: API_LINK(host),\n                message: \"Unknown error on script loading\",\n                col: 0,\n                line: 0\n            });\n        };\n        if (!startLoading.get(host)) {\n            loadScript(API_LINK(host), null, handleError, onJavascriptError);\n            startLoading.set(host, true);\n        }\n        return function() {\n            callbacks.splice(index, 1);\n        };\n    }, [\n        host,\n        onJavascriptError,\n        smartCaptcha\n    ]);\n    return smartCaptcha;\n}\nfunction useSubscriptions(props) {\n    var propsRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({});\n    var widgetId = props.widgetId, smartCaptcha = props.smartCaptcha, onChallengeHidden = props.onChallengeHidden, onChallengeVisible = props.onChallengeVisible, onSuccess = props.onSuccess, onNetworkError = props.onNetworkError, onTokenExpired = props.onTokenExpired, onJavascriptError = props.onJavascriptError;\n    propsRef.current = {\n        onChallengeHidden: onChallengeHidden,\n        onChallengeVisible: onChallengeVisible,\n        onSuccess: onSuccess,\n        onNetworkError: onNetworkError,\n        onTokenExpired: onTokenExpired,\n        onJavascriptError: onJavascriptError\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        if (!smartCaptcha || typeof widgetId !== \"number\") {\n            return;\n        }\n        var unsubscribeFns = [\n            smartCaptcha.subscribe(widgetId, \"challenge-visible\", function() {\n                var _a, _b;\n                (_b = (_a = propsRef.current).onChallengeVisible) === null || _b === void 0 ? void 0 : _b.call(_a);\n            }),\n            smartCaptcha.subscribe(widgetId, \"challenge-hidden\", function() {\n                var _a, _b;\n                (_b = (_a = propsRef.current).onChallengeHidden) === null || _b === void 0 ? void 0 : _b.call(_a);\n            }),\n            smartCaptcha.subscribe(widgetId, \"network-error\", function() {\n                var _a, _b;\n                (_b = (_a = propsRef.current).onNetworkError) === null || _b === void 0 ? void 0 : _b.call(_a);\n            }),\n            smartCaptcha.subscribe(widgetId, \"success\", function(token) {\n                var _a, _b;\n                (_b = (_a = propsRef.current).onSuccess) === null || _b === void 0 ? void 0 : _b.call(_a, token);\n            }),\n            smartCaptcha.subscribe(widgetId, \"token-expired\", function() {\n                var _a, _b;\n                (_b = (_a = propsRef.current).onTokenExpired) === null || _b === void 0 ? void 0 : _b.call(_a);\n            }),\n            smartCaptcha.subscribe(widgetId, \"javascript-error\", function(error) {\n                var _a, _b;\n                (_b = (_a = propsRef.current).onJavascriptError) === null || _b === void 0 ? void 0 : _b.call(_a, error);\n            })\n        ];\n        return function() {\n            return unsubscribeFns.forEach(function(fn) {\n                return fn === null || fn === void 0 ? void 0 : fn();\n            });\n        };\n    }, [\n        widgetId,\n        smartCaptcha\n    ]);\n}\nvar useIsomorphicLayoutEffect =  false ? 0 : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\nvar style = {\n    height: 102\n};\nvar SmartCaptcha = function(props) {\n    var containerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var onChallengeHidden = props.onChallengeHidden, onChallengeVisible = props.onChallengeVisible, onSuccess = props.onSuccess, onNetworkError = props.onNetworkError, onTokenExpired = props.onTokenExpired, onJavascriptError = props.onJavascriptError, language = props.language, host = props.host, restProps = __rest(props, [\n        \"onChallengeHidden\",\n        \"onChallengeVisible\",\n        \"onSuccess\",\n        \"onNetworkError\",\n        \"onTokenExpired\",\n        \"onJavascriptError\",\n        \"language\",\n        \"host\"\n    ]);\n    var smartCaptcha = useSmartCaptchaLoader(host, onJavascriptError);\n    var _a = __read((0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), 2), widgetId = _a[0], setWidgetId = _a[1];\n    var destroyedRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({});\n    useSubscriptions({\n        widgetId: widgetId,\n        smartCaptcha: smartCaptcha,\n        onChallengeHidden: onChallengeHidden,\n        onChallengeVisible: onChallengeVisible,\n        onSuccess: onSuccess,\n        onNetworkError: onNetworkError,\n        onTokenExpired: onTokenExpired,\n        onJavascriptError: onJavascriptError\n    });\n    useIsomorphicLayoutEffect(function() {\n        if (!containerRef.current || !smartCaptcha) {\n            return;\n        }\n        var id = smartCaptcha.render(containerRef.current, __assign(__assign({}, restProps), {\n            hl: language\n        }));\n        setWidgetId(id);\n        return function() {\n            smartCaptcha.destroy(id);\n            setWidgetId(undefined);\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            destroyedRef.current[id] = true;\n        };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        smartCaptcha,\n        language,\n        restProps.sitekey,\n        restProps.test,\n        restProps.webview\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: containerRef,\n        className: \"smart-captcha\",\n        style: style\n    });\n};\nvar InvisibleSmartCaptcha = function(props) {\n    var containerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var onChallengeHidden = props.onChallengeHidden, onChallengeVisible = props.onChallengeVisible, onSuccess = props.onSuccess, onNetworkError = props.onNetworkError, onTokenExpired = props.onTokenExpired, onJavascriptError = props.onJavascriptError, language = props.language, host = props.host, restProps = __rest(props, [\n        \"onChallengeHidden\",\n        \"onChallengeVisible\",\n        \"onSuccess\",\n        \"onNetworkError\",\n        \"onTokenExpired\",\n        \"onJavascriptError\",\n        \"language\",\n        \"host\"\n    ]);\n    var smartCaptcha = useSmartCaptchaLoader(host, onJavascriptError);\n    var _a = __read((0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), 2), widgetId = _a[0], setWidgetId = _a[1];\n    var destroyedRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({});\n    useSubscriptions({\n        widgetId: widgetId,\n        smartCaptcha: smartCaptcha,\n        onChallengeHidden: onChallengeHidden,\n        onChallengeVisible: onChallengeVisible,\n        onSuccess: onSuccess,\n        onNetworkError: onNetworkError,\n        onTokenExpired: onTokenExpired,\n        onJavascriptError: onJavascriptError\n    });\n    useIsomorphicLayoutEffect(function() {\n        if (!containerRef.current || !smartCaptcha) {\n            return;\n        }\n        var id = smartCaptcha.render(containerRef.current, __assign(__assign({}, restProps), {\n            invisible: true,\n            hl: language\n        }));\n        setWidgetId(id);\n        return function() {\n            smartCaptcha === null || smartCaptcha === void 0 ? void 0 : smartCaptcha.destroy(id);\n            setWidgetId(undefined);\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            destroyedRef.current[id] = true;\n        };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        smartCaptcha,\n        language,\n        restProps.hideShield,\n        restProps.shieldPosition,\n        restProps.sitekey,\n        restProps.test,\n        restProps.webview\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        if (smartCaptcha && restProps.visible && typeof widgetId === \"number\" && !destroyedRef.current[widgetId]) {\n            smartCaptcha.execute(widgetId);\n        }\n    }, [\n        smartCaptcha,\n        restProps.visible,\n        widgetId\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: containerRef,\n        className: \"smart-captcha\"\n    });\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@yandex/smart-captcha/module.mjs\n");

/***/ })

};
;